class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int n=graph.size();
        if(n==1) return 0;
        int all=(1<<n) -1;
        
        queue<pair<int,pair<int,int>>>  q;
        set<pair<int,int>> vis;

        for(int i=0;i<n;i++){
            int new_mask=0<<i;
            q.push({i,{0,new_mask}});
            vis.insert({i,new_mask});
        }

        while(!q.empty()){
             auto f=q.front();
              int node=f.first,dis=f.second.first,mask=f.second.second;
               q.pop();

              for(auto a:graph[node]){
                 int new_m= (mask |( 1<<a));
                  if(new_m==all) return dis; 
                 if(vis.count({a,new_m})) continue;

                 

                 q.push({a,{dis+1,new_m}});
                 vis.insert({a,new_m});
              }

        }

        return 0;
    }
};